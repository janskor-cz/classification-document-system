# Classification Document System - Environment Variables Template
# Copy this file to .env and fill in your actual values

# ============================================================================
# GENERAL SETTINGS
# ============================================================================

# Application Environment (development, testing, production)
FLASK_ENV=development

# Debug mode (true/false) - NEVER set to true in production
FLASK_DEBUG=true

# Application host and port
FLASK_HOST=127.0.0.1
FLASK_PORT=5000

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Secret key for Flask sessions (generate with: python -c "import os; print(os.urandom(32).hex())")
SECRET_KEY=your-secret-key-here-generate-a-random-one

# JWT secret key for token authentication
JWT_SECRET_KEY=your-jwt-secret-key-here-generate-a-random-one

# Password hashing rounds (12-15 recommended for production)
PASSWORD_SALT_ROUNDS=12

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Database URL - SQLite for development, PostgreSQL for production
# Development (SQLite):
DATABASE_URL=sqlite:///classification_system.db

# Production (PostgreSQL):
# DATABASE_URL=postgresql://username:password@localhost:5432/classification_db

# Database connection pool settings
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30

# Enable SQL query logging (true/false)
DB_ECHO_SQL=false

# ============================================================================
# HYPERLEDGER IDENTUS CONFIGURATION
# ============================================================================

# Identus Agent URLs
IDENTUS_ISSUER_URL=http://localhost:8000/cloud-agent
IDENTUS_HOLDER_URL=http://localhost:7000/cloud-agent
IDENTUS_VERIFIER_URL=http://localhost:9000/cloud-agent

# Identus Bridge IP (for Docker networking)
IDENTUS_BRIDGE_IP=172.17.0.1

# Connection settings
IDENTUS_TIMEOUT=30
IDENTUS_HEALTH_CHECK_INTERVAL=60
IDENTUS_MAX_RETRY_ATTEMPTS=3
IDENTUS_RETRY_DELAY=5

# ============================================================================
# DOCUMENT MANAGEMENT
# ============================================================================

# Upload folder path (relative to project root)
UPLOAD_FOLDER=uploads

# Maximum file size in bytes (100MB = 104857600)
MAX_FILE_SIZE=104857600

# Allowed file extensions (comma-separated)
ALLOWED_EXTENSIONS=pdf,doc,docx,txt

# Enable document encryption at rest (true/false)
DOCUMENT_ENCRYPTION=true

# Auto-classification feature (true/false)
AUTO_CLASSIFICATION=false

# Document retention policies (days)
RETENTION_PUBLIC=1825     # 5 years
RETENTION_INTERNAL=2555   # 7 years
RETENTION_CONFIDENTIAL=3650 # 10 years

# ============================================================================
# ENCRYPTION SETTINGS
# ============================================================================

# Encryption algorithm for documents
ENCRYPTION_ALGORITHM=AES-256-GCM

# Key derivation iterations (higher = more secure, slower)
KEY_DERIVATION_ITERATIONS=100000

# ============================================================================
# AUDIT AND LOGGING
# ============================================================================

# Enable audit logging (true/false)
ENABLE_AUDIT_LOGGING=true

# Audit log file path
AUDIT_LOG_FILE=logs/audit.log

# Audit log retention (days)
AUDIT_RETENTION_DAYS=2555  # 7 years

# Application log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Maximum log file size in bytes (10MB = 10485760)
MAX_LOG_FILE_SIZE=10485760

# Number of backup log files to keep
LOG_BACKUP_COUNT=5

# ============================================================================
# WEB APPLICATION SETTINGS
# ============================================================================

# Session timeout in seconds (3600 = 1 hour)
SESSION_TIMEOUT=3600

# CORS allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# Enable threading for Flask (true/false)
FLASK_THREADED=true

# ============================================================================
# CLASSIFICATION LEVELS
# ============================================================================

# Classification level mappings (do not change unless you know what you're doing)
CLASSIFICATION_PUBLIC_LEVEL=1
CLASSIFICATION_INTERNAL_LEVEL=2
CLASSIFICATION_CONFIDENTIAL_LEVEL=3

# ============================================================================
# EMAIL SETTINGS (Optional - for notifications)
# ============================================================================

# SMTP server configuration (optional)
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# SMTP_USE_TLS=true

# Email settings
# FROM_EMAIL=noreply@yourcompany.com
# ADMIN_EMAIL=admin@yourcompany.com

# ============================================================================
# REDIS CONFIGURATION (Optional - for caching/sessions)
# ============================================================================

# Redis URL for caching and session storage (optional)
# REDIS_URL=redis://localhost:6379/0

# Redis connection settings
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_DB=0
# REDIS_PASSWORD=

# ============================================================================
# MONITORING AND METRICS (Optional)
# ============================================================================

# Enable Prometheus metrics (true/false)
# ENABLE_METRICS=false

# Metrics endpoint path
# METRICS_PATH=/metrics

# Health check endpoint path
HEALTH_CHECK_PATH=/health

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================

# External API endpoints (if needed)
# EXTERNAL_API_URL=https://api.example.com
# EXTERNAL_API_KEY=your-api-key

# Webhook URLs for notifications
# WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

# Development-specific settings (only for FLASK_ENV=development)

# Enable Flask reloader (true/false)
FLASK_RELOAD=true

# Enable SQL query profiling
PROFILE_SQL_QUERIES=false

# Mock external services (true/false)
MOCK_EXTERNAL_SERVICES=false

# Seed test data on startup (true/false)
SEED_TEST_DATA=false

# ============================================================================
# PRODUCTION SETTINGS
# ============================================================================

# Production-specific settings (only for FLASK_ENV=production)

# Force HTTPS redirects (true/false)
# FORCE_HTTPS=true

# Security headers (true/false)
# SECURITY_HEADERS=true

# Rate limiting (requests per minute)
# RATE_LIMIT=100

# ============================================================================
# BACKUP SETTINGS
# ============================================================================

# Database backup configuration
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM (cron format)
# BACKUP_RETENTION_DAYS=30
# BACKUP_STORAGE_PATH=backups/

# ============================================================================
# TESTING SETTINGS
# ============================================================================

# Testing-specific settings (only for FLASK_ENV=testing)

# Test database URL (in-memory SQLite)
# TEST_DATABASE_URL=sqlite:///:memory:

# Disable audit logging during tests
# TEST_DISABLE_AUDIT=true

# Test data folder
# TEST_DATA_FOLDER=tests/fixtures

# ============================================================================
# NOTES AND INSTRUCTIONS
# ============================================================================

# 1. NEVER commit the actual .env file to version control
# 2. Generate strong random keys for SECRET_KEY and JWT_SECRET_KEY
# 3. Use different values for development, testing, and production
# 4. For production, consider using a proper secrets management system
# 5. Regularly rotate secret keys and passwords
# 6. Use environment-specific .env files (.env.development, .env.production)

# Generate random keys with these commands:
# python -c "import os; print('SECRET_KEY=' + os.urandom(32).hex())"
# python -c "import os; print('JWT_SECRET_KEY=' + os.urandom(32).hex())"

# Example production PostgreSQL URL:
# DATABASE_URL=postgresql://classification_user:secure_password@db-server:5432/classification_prod

# Example production Identus URLs (if using different servers):
# IDENTUS_ISSUER_URL=https://identus-issuer.yourcompany.com/cloud-agent
# IDENTUS_HOLDER_URL=https://identus-holder.yourcompany.com/cloud-agent
# IDENTUS_VERIFIER_URL=https://identus-verifier.yourcompany.com/cloud-agent